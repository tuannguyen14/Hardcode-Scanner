# Enhanced Hardcode Security Scanner v2.1

![Security Scanner](https://img.shields.io/badge/Version-2.1-blue.svg)
![License](https://img.shields.io/badge/License-MIT-green.svg)
![Language](https://img.shields.io/badge/Language-JavaScript-yellow.svg)

The **Enhanced Hardcode Security Scanner** is a powerful JavaScript tool designed to detect hardcoded sensitive data in web applications. It scans DOM content, JavaScript files, browser storage, cookies, and network requests to identify vulnerabilities such as exposed API keys, private cryptographic keys, mnemonic phrases, and database credentials. Built with advanced validation to minimize false positives, it provides detailed reports and actionable security recommendations.

## üöÄ Features

- **Comprehensive Scanning**:
  - DOM content, inline/external scripts, localStorage, sessionStorage, IndexedDB, cookies, and window objects
  - Network request monitoring (`fetch` interception)
- **Extensive Pattern Detection**:
  - Cryptocurrency keys (Bitcoin, Ethereum, Solana, SUI)
  - Mnemonic phrases (12, 15, 18, 21, 24 words)
  - API keys (AWS, Google Cloud, GitHub, OpenAI, Stripe, etc.)
  - Database connection strings (MongoDB, PostgreSQL, MySQL)
  - JWT tokens, RSA/ECDSA/OpenSSH/Ed25519 private keys, and generic secrets
- **Advanced Validation**: Reduces false positives with pattern-specific validators (e.g., BIP39 wordlist, key format checks)
- **Multiple Scan Modes**:
  - `quickScan`: DOM and storage
  - `standardScan`: Comprehensive scan
  - `deepFullScan`: Includes dynamic content and network monitoring
- **Real-time Monitoring**: Periodic scans for new sensitive data
- **Export Options**: JSON, CSV, and HTML report formats
- **Customizable**: Configurable scan options and verbosity

## üõ†Ô∏è Installation

1. **Include the Script**:
   Option 1: Include in HTML
    Add the following line to your HTML file to load the script:
   ```html
   <script src="bot.js"></script>
   ```
   Save bot.js in the same directory as your HTML file or provide the correct path.

   Option 2: Run in Browser Console
    If you want to test the scanner directly in the browser:
    
    Open your browser's Developer Tools (usually by pressing F12 or right-clicking and selecting "Inspect").
    Navigate to the "Console" tab.
    Copy the entire content of bot.js and paste it into the console, then press Enter to execute.
    The scanner will be available as window.scanner for running commands.

2. **Access via Console**:
   The scanner is available as `window.scanner` in the browser console.

3. **No Dependencies**:
   Runs entirely in the browser without external libraries.

## üìñ Usage

The scanner auto-runs a deep scan on load. Use the following commands in the browser console:

```javascript
// Quick scan (DOM + storage)
scanner.quickScan();

// Standard scan (DOM, scripts, storage, window object)
scanner.standardScan();

// Deep scan (all sources + network monitoring)
scanner.deepFullScan();

// Scan specific DOM element
scanner.scanElement("#login-form");

// Start real-time monitoring (every 10s)
scanner.startMonitoring();

// Stop monitoring
scanner.stopMonitoring();

// Export results
scanner.export();        // JSON
scanner.export("csv");   // CSV
scanner.export("html");  // HTML

// Test a pattern
scanner.testPattern("openai_api_key", "sk-1234567890abcdef");

// List all patterns
scanner.listPatterns();

// Custom scan
scanner.scan({
  includeScripts: true,
  includeStorage: true,
  includeCookies: true,
  includeDOM: true,
  includeWindowObject: true,
  includeFetch: false,
  deepScan: false,
  verbose: true
});
```

### Example Output
- **Header**: Target URL, timestamp, and scan mode
- **Findings**: Grouped by severity (CRITICAL, HIGH, MEDIUM, LOW, INFO) with details (type, location, source, match, confidence, context)
- **Summary**: Breakdown by type and location
- **Recommendations**: Actionable security advice

## ‚öôÔ∏è Configuration

Customize scans with the following options:

```javascript
{
  includeScripts: boolean,      // Scan scripts
  includeStorage: boolean,      // Scan storage
  includeCookies: boolean,      // Scan cookies
  includeDOM: boolean,          // Scan DOM
  includeWindowObject: boolean, // Scan window object
  includeFetch: boolean,        // Monitor network requests
  deepScan: boolean,           // Deep analysis (dynamic content, frameworks)
  verbose: boolean             // Detailed output
}
```

## üîç Pattern Detection

The scanner detects:

- **Cryptocurrency**:
  - Bitcoin (WIF, Hex)
  - Ethereum private keys
  - Solana (Base58, Uint8Array)
  - SUI (Bech32, Ed25519)
  - Mnemonic phrases (12-24 words)
- **API Keys**:
  - AWS (Access Key ID, Secret Key, Session Token)
  - Google Cloud (API Key, Service Account Key)
  - GitHub (PAT, OAuth, App Token, Refresh Token)
  - OpenAI (API Key, Project Key)
  - Stripe (Live/Test Secret Key, Restricted Key)
- **Database**:
  - MongoDB, PostgreSQL, MySQL connection strings
- **Other**:
  - JWT tokens
  - RSA, ECDSA, OpenSSH, Ed25519 private keys
  - Generic API keys, secrets, passwords
  - Cryptocurrency addresses (informational)

Each pattern includes severity, validation, and context extraction.

## üõ°Ô∏è Security Recommendations

If sensitive data is found:

1. üîê Use environment variables for sensitive data
2. üèóÔ∏è Adopt secret management services (e.g., AWS Secrets Manager, HashiCorp Vault)
3. üîÑ Rotate secrets regularly
4. üö´ Never commit secrets to version control
5. üìÅ Use `.env` files (add to `.gitignore`)
6. üõ°Ô∏è Implement access controls and encryption
7. üîç Add automated scanning to CI/CD
8. üìö Train developers on secure coding

## ‚ö†Ô∏è Limitations

- Browser-based, cannot scan server-side code
- Limited IndexedDB access due to permissions
- Only intercepts `fetch` requests (XHR requires additional setup)
- Dynamic content may require monitoring for complete coverage

## ü§ù Contributing

1. Fork the repository
2. Create a feature/bug-fix branch
3. Submit a pull request with a clear description

Ensure new patterns include validation and appropriate severity.

## üìú License

MIT License

## üì¨ Contact

Open an issue on GitHub for questions or feature requests.